//https://github.com/microsoft/BCTech/blob/master/samples/AzureOpenAI/Conference%20Demos/Days%20of%20Knowledge%20Nordic%202024/Developing%20AI%20Experiences/Demo3/WeatherFunction.Codeunit.al
page 50004 ARD_CampaignPrompt
{
    ApplicationArea = All;
    Caption = 'Campaign Prompt';
    PageType = PromptDialog;
    IsPreview = true;
    Extensible = false;
    PromptMode = Prompt;

    layout
    {
        area(prompt)
        {
            field(ChatRequest; ChatRequest)
            {
                ShowCaption = false;
                MultiLine = true;
                ApplicationArea = All;
                InstructionalText = 'Provide any campaign detail descriptions here.';

                trigger OnValidate()
                begin
                    CurrPage.Update();
                end;
            }
        }

        area(Content)
        {
            field(Output; RequestResponse)
            {
                ShowCaption = false;
                InstructionalText = 'The response generated by the AI based on the provided campaign details.';
                Enabled = true;
                Editable = true;
                MultiLine = true;
                ExtendedDatatype = RichContent;
            }
        }
    }
    actions
    {
        area(SystemActions)
        {
            // You can have custom behaviour for the main system actions in a PromptDialog page, such as generating a suggestion with copilot, regenerate, or discard the
            // suggestion. When you develop a Copilot feature, remember: the user should always be in control (the user must confirm anything Copilot suggests before any
            // change is saved).
            // This is also the reason why you cannot have a physical SourceTable in a PromptDialog page (you either use a temporary table, or no table).
            systemaction(Generate)
            {
                Caption = 'Generate';
                ToolTip = 'Generate Item Substitutions proposal with Dynamics 365 Copilot.';

                trigger OnAction()
                begin
                    RunGeneration();
                end;
            }
            systemaction(OK)
            {
                Caption = 'Confirm';
                ToolTip = 'Add selected areas the campaign.';
            }
            systemaction(Cancel)
            {
                Caption = 'Discard';
                ToolTip = 'Discard proposed response by Dynamics 365 Copilot.';
            }
            systemaction(Regenerate)
            {
                Caption = 'Regenerate';
                ToolTip = 'Regenerate proposal with Dynamics 365 Copilot.';
                trigger OnAction()
                begin
                    RunGeneration();
                end;
            }
        }
    }

    var
        JSONDescriptions: JsonArray;
        ChatRequest: Text;
        RequestResponse: Text;
        PostalCodes: Text;

    /// <summary>
    /// Trigger executed when the page is about to close.
    /// If the close action is OK, it adds the selected items from the SubItemRecommendations page
    /// to the current context using the provided SalesHeaderNo and MaxSalesLineCount.
    /// </summary>
    /// <param name="closeAction">The action that caused the page to close.</param>
    /// <returns>Boolean indicating whether the page should close.</returns>
    trigger OnQueryClosePage(closeAction: Action): Boolean
    begin
        if CloseAction = Action::OK then
            Message('Items added to Substitutions.');
    end;

    Procedure GetResult(): Text
    begin
        exit(PostalCodes);
    end;


    local procedure RunGeneration()
    var
        GenerateRecommdation: Codeunit ARD_Copilot_BigAL;
        Attempts: Integer;
    begin
        RequestResponse := '';
        CurrPage.Caption := ChatRequest;
        GenerateRecommdation.SetUserPrompt(ChatRequest);

        Attempts := 0;
        while (StrLen(RequestResponse) = 0) AND (Attempts < 5) do begin
            if GenerateRecommdation.Run() then
                RequestResponse := GenerateRecommdation.GetResult();
            Attempts += 1;
        end;

        if (Attempts < 5) then
            RunPostalCodeGeneration()
        else
            Error('Something went wrong. Please try again. %1', GetLastErrorText());
    end;

    local Procedure RunPostalCodeGeneration()
    var
        GeneratePostalCodes: Codeunit ARD_CopilotJimmyTheFish;
        Attempts: Integer;
    begin
        PostalCodes := '';
        GeneratePostalCodes.SetUserPrompt(RequestResponse);

        Attempts := 0;
        while (StrLen(PostalCodes) = 0) AND (Attempts < 5) do begin
            if GeneratePostalCodes.Run() then
                PostalCodes := GeneratePostalCodes.GetResult();
            Attempts += 1;
        end;

        if (Attempts < 5) then
            Message('Postal Codes generated: %1', PostalCodes)
        else
            Error('Something went wrong. Please try again. %1', GetLastErrorText());
    end;


    // Adds a new item description to the JSONDescriptions array
    procedure AddItemDescription(Description: Text)
    begin
        JSONDescriptions.add(Description);
    end;
}
