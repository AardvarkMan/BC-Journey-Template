codeunit 50005 ARDCopilotItemRecommendations
{
    trigger OnRun()
    begin
        GenerateItemRecommendations();
    end;


    procedure SetUserPrompt(InputUserPrompt: Text)
    begin
        UserPrompt := InputUserPrompt;
    end;

    procedure SetItemDescriptions(InputItemDescriptions: JsonArray)
    begin
        ItemDescriptions := InputItemDescriptions;
    end;

    procedure GetResult(): Text
    begin
        exit(CompletionResult);
    end;

    internal procedure GetCompletionResult(): Text
    begin
        exit(CompletionResult);
    end;

    /// <summary>
    /// Generates item recommendations by preparing item descriptions and invoking the Chat procedure.
    /// It constructs a JSON object containing the user prompt and item descriptions, then sends it to Azure OpenAI.
    /// The result is stored in CompletionResult.
    /// </summary>
    local procedure GenerateItemRecommendations()
    var
        JObject: JsonObject;
        JResTok: JsonToken;
        TmpText: Text;
        JsonKey: Text;
    begin
        CompletionResult := ''; // Clear previous result

        // Add the user prompt to the item descriptions array
        ItemDescriptions.Add(UserPrompt);

        // Add the item descriptions array to a JSON object under the key 'Descriptions'
        JObject.Add('Descriptions', ItemDescriptions);

        // Serialize the JSON object to text
        JObject.WriteTo(TmpText);

        // Call the Chat procedure with the system prompt and the serialized descriptions
        CompletionResult := Chat(GetSystemPrompt(), TmpText);
    end;

    /// <summary>
    /// The Chat procedure interacts with Azure OpenAI to generate a chat completion based on the provided system and user prompts.
    /// It uses various helper codeunits to configure and manage the interaction, including setting up authorization, 
    /// configuring chat parameters, and handling responses.
    /// </summary>
    /// <param name="ChatSystemPrompt">The system prompt to guide the chat completion.</param>
    /// <param name="ChatUserPrompt">The user prompt to provide input for the chat completion.</param>
    /// <returns>
    /// A text result containing the response generated by Azure OpenAI. 
    /// If the operation fails, an error is raised with the corresponding error message.
    /// </returns>
    procedure Chat(ChatSystemPrompt: Text; ChatUserPrompt: Text): Text
    var
        AzureOpenAI: Codeunit "Azure OpenAI";
        EnvironmentInformation: Codeunit "Environment Information";
        AOAIOperationResponse: Codeunit "AOAI Operation Response";
        AOAIChatCompletionParams: Codeunit "AOAI Chat Completion Params";
        AOAIChatMessages: Codeunit "AOAI Chat Messages";
        AOAIDeployments: Codeunit "AOAI Deployments";
        IsolatedStorageWrapper: Codeunit ARD_IsolatedStorageWrapper;
        Result: Text;
        EntityTextModuleInfo: ModuleInfo;
    begin
        // Set up Azure OpenAI authorization using isolated storage values
        //AzureOpenAI.SetAuthorization(Enum::"AOAI Model Type"::"Chat Completions", IsolatedStorageWrapper.GetEndpoint(), IsolatedStorageWrapper.GetDeployment(), IsolatedStorageWrapper.GetSecretKey());
        AzureOpenAI.SetManagedResourceAuthorization(Enum::"AOAI Model Type"::"Chat Completions", IsolatedStorageWrapper.GetDeployment(), IsolatedStorageWrapper.GetSecretKey(), AoaiDeployments.GetGPT41Latest());
        
        // Set the Copilot capability for customer detail processing
        AzureOpenAI.SetCopilotCapability(Enum::"Copilot Capability"::"Customer Detail");

        // Configure chat completion parameters
        AOAIChatCompletionParams.SetMaxTokens(2500); // Set maximum tokens for the response
        AOAIChatCompletionParams.SetTemperature(0); // Set temperature for deterministic responses
        AOAIChatCompletionParams.SetJsonMode(true); // Enable JSON mode for structured responses

        // Add system and user messages to the chat
        AOAIChatMessages.AddSystemMessage(ChatSystemPrompt); // Add the system prompt
        AOAIChatMessages.AddUserMessage(ChatUserPrompt); // Add the user prompt

        // Generate the chat completion using Azure OpenAI
        AzureOpenAI.GenerateChatCompletion(AOAIChatMessages, AOAIChatCompletionParams, AOAIOperationResponse);

        // Check if the operation was successful and return the result
        if AOAIOperationResponse.IsSuccess() then
            Result := AOAIChatMessages.GetLastMessage() // Retrieve the last message from the chat
        else
            Error(AOAIOperationResponse.GetError()); // Handle errors by raising an error with the response message

        exit(Result); // Return the result of the chat completion
    end;

    // Local procedure to provide the system prompt for the chat completion
    local procedure GetSystemPrompt() SystemPrompt: Text
    begin
        // Define the system prompt that instructs the AI on how to process the user's input
        SystemPrompt := @'The user will provide details on several items they are purchasing.
        Your task is to identify keywords the describe the items so that the user can easily find similar items in the future. The output should be a list of words that describe the items based on the descriptions provided.
        The descriptions should be concise and relevant to the items avoiding product names or specific brands. The descriptions should be common to all items, not specific to any one item. Results should be ordered by relevance to all items provided.
        You will return a JSON Object with an array named "Keywords".
        The response should be in JSON format.';
    end;

    var
        UserPrompt: Text;
        ItemDescriptions: JsonArray;
        CompletionResult: Text;
}
